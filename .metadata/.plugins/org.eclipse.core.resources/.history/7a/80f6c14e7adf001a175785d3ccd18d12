package leetcodePratice;

public class exercise37_LeetCode19_Remove_Nth_Node_From_End_Of_List {

	/*
	 	Given a linked list, remove the n-th node from the end of list and return its head.

		Example:
			Given linked list: 1->2->3->4->5, and n = 2.
			After removing the second node from the end, the linked list becomes 1->2->3->5.
			
		Note:
			Given n will always be valid.
		
		Follow up:
			Could you do this in one pass?
	 */
	
	
	  //Definition for singly-linked list.
	public class ListNode {
		int val;
		ListNode next;
		
		ListNode() {
			
		}
		
		ListNode(int val) { 
			this.val = val; 
		}
		ListNode(int val, ListNode next) { 
			this.val = val; 
			this.next = next; 
		}
	}
	
	    public ListNode removeNthFromEnd(ListNode head, int n) {
	    	ListNode cur;
	    	cur = head;
	    	
	    	int size=1;
	    	while(cur.next!=null) {
	    		cur=cur.next;
	    		size++;
	    	}
	    	
	    	int removeTheNthPosition=size-n+1;
	    	
	    	
	    	cur = head;
	    	for(int i=1;i<=size;i++) {
	    		if(i==(size-n+1)-1) {
	    			cur=cur.next.next;
	    		}
	    		cur=cur.next;
	    	}
	    	
	    	return cur;
	    }
	
}
