package leetcodePratice;

import java.util.HashMap;
import java.util.Map;

public class exercise40_LeetCode202_Happy_Number {

	/*
	 	Write an algorithm to determine if a number n is "happy".

		A happy number is a number defined by the following process: 
			Starting with any positive integer, replace the number by the sum of the squares of its digits, 
			and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. 
			Those numbers for which this process ends in 1 are happy numbers.
		
		Return True if n is a happy number, and False if not.
		
		Example: 
			Input: 19
			Output: true
			
		Explanation: 
				1^2 + 9^2 = 82
				8^2 + 2^2 = 68
				6^2 + 8^2 = 100
				1^2 + 0^2 + 0^2 = 1
	 */
	
	public static boolean isHappy(int n) {
		
		if (n <= 0) {
			return false;
		}
		if (n == 1) {
			return true;
		}
		
		Map<Integer, Integer> map = new HashMap<Integer, Integer>();
		int index = 1;
		int sum = 0;
		for (int i=0; i <(n+"").length(); i++) {
			sum += Math.pow((n+"").charAt(i)-'0', 2);
		}
		if (sum == 1) {
			return true;
		}
		if (map.containsKey(sum)) {
			return false;
		} else {
			map.put(sum, index++);
		}
		return isHappy(sum);
    }
	
	
	
	public static void main(String[] args) {
		boolean a = isHappy(19);
		System.out.println(a);

	}

}
