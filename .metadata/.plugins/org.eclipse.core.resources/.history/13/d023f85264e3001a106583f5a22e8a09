package leetcodePratice;

public class exercise39_LeetCode2_Add_Two_Number {

	/*
	 * You are given two non-empty linked lists representing two
	 * non-negativeintegers. The digits are stored in reverse order and each of
	 * their nodes contain a single digit. Add the two numbers and return it as a
	 * linked list. You may assume the two numbers do not contain any leading zero,
	 * except the number 0 itself.
	 * 
	 * Example: Input: (2 -> 4 -> 3) + (5 -> 6 -> 4) Output: 7 -> 0 -> 8
	 * Explanation: 342 + 465 = 807.
	 */

	// Definition for singly-linked list.
	public class ListNode {
		int val;
		ListNode next;

		ListNode() {
		}

		ListNode(int val) {
			this.val = val;
		}

		ListNode(int val, ListNode next) {
			this.val = val;
			this.next = next;
		}
	}

	public ListNode addTwoNumbers1(ListNode l1, ListNode l2) {
		ListNode head = new ListNode(0);
		ListNode p1=l1;
		ListNode p2=l2;
		ListNode cur = head;
		
		while(p1 != null  ||  p2 != null) {			
			int x = (p1==null)? p1.val=0: p1.val ;
			int y = (p2==null)? p2.val=0: p2.val ;		
			cur.val=cur.val+x+y;
			
			if(cur.val>=10) {
				cur.val=cur.val-10;
				cur.next = new ListNode(1);
			}else {
				cur.next = new ListNode(0);
			}
			
			cur=cur.next;
			p1=p1.next;
			p2=p2.next;
		}
		
		
		return cur;
	}
	
	//LEETCODE
	public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
	    ListNode dummyHead = new ListNode(0);
	    ListNode p = l1, q = l2, curr = dummyHead;
	    int carry = 0;
	    while (p != null || q != null) {
	        int x = (p != null) ? p.val : 0;
	        int y = (q != null) ? q.val : 0;
	        int sum = carry + x + y;
	        carry = sum / 10;
	        curr.next = new ListNode(sum % 10);
	        curr = curr.next;
	        if (p != null) p = p.next;
	        if (q != null) q = q.next;
	    }
	    if (carry > 0) {
	        curr.next = new ListNode(carry);
	    }
	    return dummyHead.next;
	}

	public static void main(String[] args) {

	}

}
