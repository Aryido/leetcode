package leetcodePratice;

public class exercise37_LeetCode19_Remove_Nth_Node_From_End_Of_List {

	/*
	 * Given a linked list, remove the n-th node from the end of list and return its
	 * head.
	 * 
	 * Example: Given linked list: 1->2->3->4->5, and n = 2. After removing the
	 * second node from the end, the linked list becomes 1->2->3->5.
	 * 
	 * Note: Given n will always be valid.
	 * 
	 * Follow up: Could you do this in one pass?
	 */

	// Definition for singly-linked list.
	public class ListNode {
		int val;
		ListNode next;

		ListNode() {

		}

		ListNode(int val) {
			this.val = val;
		}

		ListNode(int val, ListNode next) {
			this.val = val;
			this.next = next;
		}
	}

	//LEETCODE
	public ListNode removeNthFromEnd(ListNode head, int n) {
		ListNode originZero = new ListNode(0);
		originZero.next = head;
		int length = 0;
		ListNode cur = head;
		while (cur != null) {
			length++;
			cur = cur.next;
		}
		//	以上算出鏈長度
		
		int removeIndex=length-n+1;
		int i=1;
		cur = originZero;
		while (i!=removeIndex-1) {
			i++;
			cur = cur.next;
		}
		cur.next = cur.next.next;
		return originZero.next;
	}
	
	
	

}
