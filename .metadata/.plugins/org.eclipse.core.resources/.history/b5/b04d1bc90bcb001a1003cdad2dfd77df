package leetcodePratice;

public class exercise8_LeetCode53_Maximum_Subarray {

	/*
	 * Given an integer array nums, find the contiguous subarray (containing at
	 * least one number) which has the largest sum and return its sum. Example:
	 * Input: [-2,1,-3,4,-1,2,1,-5,4], Output: 6 Explanation: [4,-1,2,1] has the
	 * largest sum = 6.
	 */

	/**
	 * 
	 * @param array
	 * @return integer
	 */
	public static int maximumSubarray(int[] array) {

		if (array == null || array.length == 0) {
			return 0;
		}

		int maxnum = 0;
		int res = array[0];
		for (int i = 0; i < array.length; i++) {
			// 公式： 變數 x = (表達式) ? 若真取此值 : 若假取此值
			maxnum = (maxnum + array[i] >= array[i]) ? maxnum + array[i] : array[i];
			res = (maxnum >= res) ? maxnum : res;

		}

		return res;
	}

	/**
	 * 
	 * @param nums
	 * @return
	 */
	public int maxSubArray(int[] nums) {
		int len = nums.length;
		if (len == 0) {
			return 0;
		}
		int[] dp = new int[len];
		dp[0] = nums[0];

		for (int i = 1; i < len; i++) {
			if (dp[i - 1] >= 0) {
				dp[i] = dp[i - 1] + nums[i];
			} else {
				dp[i] = nums[i];
			}
		}

		// 最后不要忘记全部看一遍求最大值
		int res = dp[0];
		for (int i = 1; i < len; i++) {
			res = Math.max(res, dp[i]);
		}
		return res;
	}

	public static void main(String[] args) {
		int[] array = { -2, 1, -3, 4, -1, 2, 1, -5, 4 };
		System.out.println(maximumSubarray(array));

	}

}
