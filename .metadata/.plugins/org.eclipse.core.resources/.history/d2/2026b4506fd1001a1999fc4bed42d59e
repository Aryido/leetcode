package leetcodePratice;

import java.util.HashMap;

public class exercise19_LeetCode136_Single_Number {

	/*
	 * Given a non-empty array of integers, every element appears twice except for
	 * one. Find that single one.
	 * 
	 * Note: Your algorithm should have a linear runtime complexity. Could you
	 * implement it without using extra memory?
	 * 
	 * Example 1: Input: [2,2,1] Output: 1
	 * 
	 * Example 2: Input: [4,1,2,1,2] Output: 4
	 */

	// 方法一
	static int singleNumberFunction(int[] nums) {
		int singleNumber = -1;
		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
		
		for (int i = 0; i < nums.length; i++) {
			int count=1;
			if (map.containsKey(nums[i])) {
					
			} else {
				map.put(nums[i], 1);
			}
		}

		return singleNumber;
	}

	public static void main(String[] args) {
		int[] nums = { 2, 2, 1 };
		int ans = singleNumberFunction(nums);
		System.out.println(ans);

	}

}
