package leetcodePratice;

public class exersice39_LeetCode2_Add_Two_Number {

	/*
	 * You are given two non-empty linked lists representing two
	 * non-negativeintegers. The digits are stored in reverse order and each of
	 * their nodes contain a single digit. Add the two numbers and return it as a
	 * linked list. You may assume the two numbers do not contain any leading zero,
	 * except the number 0 itself.
	 * 
	 * Example: Input: (2 -> 4 -> 3) + (5 -> 6 -> 4) Output: 7 -> 0 -> 8
	 * Explanation: 342 + 465 = 807.
	 */

	// Definition for singly-linked list.
	public class ListNode {
		int val;
		ListNode next;

		ListNode() {
		}

		ListNode(int val) {
			this.val = val;
		}

		ListNode(int val, ListNode next) {
			this.val = val;
			this.next = next;
		}
	}

	public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
		ListNode originListNode = new ListNode(0);
		ListNode head = originListNode;
		int size = 0;
		while (l1.next != null) {
			size++;
		}
		
		head.val=l1.val+l2.val;
		
		int i=0;
		while(i<size) {
			
		}
		
		return l1;
	}

	public static void main(String[] args) {

	}

}
