package leetcodePratice;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map.Entry;

public class test {

//	public static void fizzBuzz(int n) {
//
//		for (int i = 1; i <= n; i++) {
//			if (i % 15 == 0) {
//				System.out.println("FizzBuzz");
//			}else if (i % 15 != 0 && i % 3 == 0) {
//				System.out.println("Fizz");
//
//			}else if (i % 15 != 0 && i % 5 == 0) {
//				System.out.println("Buzz");
//			}else { 
//				System.out.println(i);
//			}
//		}
//
//	}
//
//	public static String GetMiddleCharacters(String inputStr) {
//		String str="";
//		
//		String[] arrayStr = inputStr.split("");
//		int length=arrayStr.length;
//		if(length%2==0) {
//			str=arrayStr[length/2-1]+arrayStr[(length/2)];
//		}else {
//			str=arrayStr[length/2];
//		}
//				
//		System.out.println(str);
//		return str;
//    }
//	
//	
//	public static List<String> missingWords(String s, String t) {
//	   String[] arrayS = s.split(" ");
//	   List<String> list = new ArrayList<String>();
//	   for(String str:arrayS) {
//		   list.add(str);
//	   }
//	   String[] arrayT = t.split(" "); 
//	   for(String strT:arrayT) {
//		   if(list.contains(strT)) {
//			   list.remove(strT);
//		   }
//	   }
//	   
//		return list;
//	}
	
	
	public static int longestPalindrome(int n, String s) {
	    int ans=0;
	    String[] arrayS = s.split("");
	    HashMap<String, Integer> map = new HashMap<String,Integer>();
	    for(String str:arrayS) {
	    	if(!map.containsKey(str)) {
	    		map.put(str, 1);
	    	}else {
	    		Integer count = map.get(str);
	    		map.put(str, count+1);
	    	}
	    }
	    
	    List<Integer> list = new ArrayList<Integer>();
		for( String k:map.keySet()) {
			list.add(map.get(k));
			if(map.get(k)%2==0) {
				ans=ans+map.get(k);
			}	
	    }
	    
		Collections.sort(list);
		for(int i=list.size()-1;i>=0;i--) {
			if(list.get(i)%2!=0) {
				ans=ans+list.get(i);
				break;
			}
		}
		
	    
	    return ans;

	}

	
	
	
	public static void main(String[] args) {

		longestPalindrome(100, "frzrmzlygfveulqfpdbhlqdqrrcrwdnxeuoqqeklaitgdphcspijthbsfyfvladzpbfudkklrwqaozmixrpifeffeclhbvfukbye");

	}

}
