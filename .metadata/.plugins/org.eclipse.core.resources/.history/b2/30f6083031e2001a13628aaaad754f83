package leetcodePratice;

import java.util.HashSet;

public class exercise40_LeetCode202_Happy_Number {

	/*
	 	Write an algorithm to determine if a number n is "happy".

		A happy number is a number defined by the following process: 
			Starting with any positive integer, replace the number by the sum of the squares of its digits, 
			and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. 
			Those numbers for which this process ends in 1 are happy numbers.
		
		Return True if n is a happy number, and False if not.
		
		Example: 
			Input: 19
			Output: true
			
		Explanation: 
				1^2 + 9^2 = 82
				8^2 + 2^2 = 68
				6^2 + 8^2 = 100
				1^2 + 0^2 + 0^2 = 1
	 */
	
	public static HashSet set = new HashSet<String>();
	
	
	
	public static boolean isHappy(int n) {
		if(n<=0) {
			return false;
		}
		int sum=0;
		String str="";
		String[] array = Integer.toString(n).split("");
			
		for(int i=0;i<array.length;i++) {
				int k = Integer.parseInt(array[i]);
				sum = sum+k*k;
			}
			if(set.contains(str)) {
				return false;
			}
			str=Integer.toString(sum);
			set.add(str);
		
		return isHappy(sum);
    }
	
	
	
	public static void main(String[] args) {
		boolean a = isHappy(19);
		System.out.println(a);

	}

}
