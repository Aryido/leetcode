package leetcodePratice;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;

public class exercise20_LeetCode448_Find_Disappeared_Number {

	/*
	 	Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.
		Find all the elements of [1, n] inclusive that do not appear in this array.
		
		Could you do it without extra space and in O(n) runtime? 
		You may assume the returned list does not count as extra space.

		Example:
		
				Input:
				[4,3,2,7,8,2,3,1]
				
				Output:
				[5,6]
		*/

	/*
	 * 不管效率和記憶體解法
	 */
	static void findDisappearedNumberFunction1(int[] nums) {	
		
		
		HashSet<Integer> set = new HashSet<Integer>();	
		for(int i=0;i<nums.length;i++) {	
				set.add(nums[i]);
		}
		
		ArrayList<Integer> list = new ArrayList<Integer>();
		for(int j=0;j<nums.length;j++) {
			if(!set.contains(j)) {
				list.add(j);
			}
		}
		
		for(int i=0;i<list.size();i++) {
			
		}
		
	}
	
	public static void main(String[] args) {
		

	}

}
